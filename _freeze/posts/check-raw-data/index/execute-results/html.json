{
  "hash": "b302b20e68bec7c58f1ceeb2b45dd1bc",
  "result": {
    "markdown": "---\ntitle: \"Check Raw Data\"\nauthor: \"Liang Zhang\"\ndate: \"2022-05-07\"\ndraft: false\nformat:\n  html:\n    code-fold: true\ncategories: [data-check]\nexecute:\n  warning: false\n---\n\n\n\n\nHere we check raw data from several special tasks. Especially check the factors influencing reliability, internal consistency of each task\n\n## Forward Word Span (过目不忘)\n\n\n::: {.cell hash='index_cache/html/unnamed-chunk-2_9b752102ac5454a2ac8cc881f93e336b'}\n\n```{.r .cell-code}\ntargets::tar_load(data_valid_FWSPro, store = here::here(\"preproc/_targets\"))\nchrs_freq <- read_tsv(\"CharFreq.txt\", skip = 5)\nchrs_used <- readxl::read_excel(\"过目不忘-汉字库.xlsx\") |>\n  left_join(chrs_freq, by = \"汉字\")\ndata_adj_acc <- data_valid_FWSPro |>\n  unnest(raw_parsed) |>\n  group_by(user_id, game_time) |>\n  mutate(trial = row_number()) |>\n  ungroup() |>\n  mutate(\n    across(\n      c(stim, resp),\n      str_split,\n      pattern = \"-\"\n    )\n  ) |>\n  unnest(c(stim, resp)) |>\n  left_join(\n    select(chrs_used, stim = 汉字, stim_id = ID, stim_freq = 序列号),\n    by = \"stim\"\n  ) |>\n  left_join(\n    select(chrs_used, resp = 汉字, resp_id = ID),\n    by = \"resp\"\n  ) |>\n  separate(stim_id, c(\"stim_phon\", \"stim_form\"), convert = TRUE) |>\n  separate(resp_id, c(\"resp_phon\", \"resp_form\"), convert = TRUE) |>\n  mutate(\n    acc = case_when(\n      stim == resp ~ \"正确\",\n      stim_phon == resp_phon ~ \"同音字\",\n      stim_phon != resp_phon ~ \"错误\"\n    )\n  )\ndata_adj_acc |>\n  group_by(stim, stim_phon, stim_freq, acc) |>\n  summarise(n = n(), .groups = \"drop_last\") |>\n  mutate(prop = n / sum(n)) |>\n  ungroup() |>\n  ggplot(aes(stim, prop, fill = acc)) +\n  geom_bar(stat = \"identity\") +\n  geom_text(\n    aes(label = scales::label_percent(accuracy = 1)(prop)),\n    position = position_stack(vjust = 0.5),\n    color = \"white\"\n  ) +\n  geom_text(\n    aes(label = stim_freq),\n    y = 0\n  ) +\n  scale_fill_brewer(palette = \"Accent\") +\n  facet_wrap(~ stim_phon, scales = \"free_x\", nrow = 1) +\n  labs(x = \"\", y = \"\", fill = \"\") +\n  # scale_y_continuous(expand = c(0, 0)) +\n  ggthemes::theme_hc() +\n  theme(\n    axis.text.x = element_text(family = \"SimHei\"),\n    legend.text = element_text(family = \"SimHei\")\n  )\n```\n\n::: {.cell-output-display}\n![Homophone Selection Proportion](index_files/figure-html/unnamed-chunk-2-1.png){width=1440}\n:::\n:::\n\n\n## Schulte Grid (舒尔特方格)\n\n\n::: {.cell}\n\n```{.r .cell-code}\ntargets::tar_load(data_valid_SchulteMed, store = here::here(\"preproc/_targets\"))\nrt_by_resp <- data_valid_SchulteMed |>\n  mutate(\n    raw_parsed = map(\n      raw_parsed,\n      ~ . |> mutate(resp = as.integer(resp))\n    )\n  ) |>\n  unnest(raw_parsed) |>\n  group_by(user_id, game_time) |>\n  mutate(resp_adj = ifelse(acc == 0, NA, resp)) |>\n  fill(resp_adj, .direction = \"up\") |>\n  ungroup() |>\n  drop_na() |>\n  group_by(user_id, game_version, game_time, resp_adj) |>\n  summarise(rt = sum(rt) / 1000, .groups = \"drop\") |>\n  filter(rt < 300)\nrt_by_resp |>\n  ggplot(aes(resp_adj, rt, color = game_version)) +\n  geom_point(shape = \".\") +\n  geom_smooth() +\n  scale_y_log10() +\n  scale_color_brewer(palette = \"Paired\") +\n  labs(x = \"\", y = \"Response Time (s)\", color = \"Version\") +\n  theme_minimal()\n```\n\n::: {.cell-output-display}\n![](index_files/figure-html/unnamed-chunk-3-1.png){width=672}\n:::\n:::\n\n\n<!-- ## Reasoning (推理类题目) -->\n\n<!-- ```{r} -->\n<!-- targets::tar_load(data_valid_DRA, store = here::here(\"preproc/_targets\")) -->\n<!-- data_valid_DRA |>  -->\n<!--   filter(course_name == \"清华大学认知实验D\") |>  -->\n<!--   unnest(raw_parsed) |>  -->\n<!--   mutate(item = as.numeric(as_factor(itemid))) |>  -->\n<!--   # group_by(item) |>  -->\n<!--   # filter(between(mean(acc == 1), 0.6, 0.9)) |> -->\n<!--   # ungroup() |>  -->\n<!--   filter(acc != -1) |>  -->\n<!--   pivot_wider( -->\n<!--     id_cols = user_id, -->\n<!--     names_from = item, -->\n<!--     values_from = acc -->\n<!--   ) |>  -->\n<!--   psycModel::reliability_summary(-user_id) -->\n<!-- ``` -->\n",
    "supporting": [],
    "filters": [
      "rmarkdown/pagebreak.lua"
    ],
    "includes": {},
    "engineDependencies": {},
    "preserve": {},
    "postProcess": null
  }
}