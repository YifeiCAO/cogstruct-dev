{
  "hash": "a948a560792d0ca5d5889629f6d557c0",
  "result": {
    "markdown": "---\ntitle: \"Check Raw Data\"\nauthor: \"Liang Zhang\"\ndate: \"2022-05-07\"\ndraft: false\nformat:\n  html:\n    code-fold: true\ncategories: [data-check]\nexecute:\n  warning: false\n---\n\n\n\n\nHere we check raw data from several special tasks. Especially check the factors influencing reliability, internal consistency of each task\n\n## Forward Word Span (过目不忘)\n\n\n::: {.cell hash='index_cache/html/unnamed-chunk-2_9b752102ac5454a2ac8cc881f93e336b'}\n\n```{.r .cell-code}\ntargets::tar_load(data_valid_FWSPro, store = here::here(\"preproc/_targets\"))\nchrs_freq <- read_tsv(\"CharFreq.txt\", skip = 5)\nchrs_used <- readxl::read_excel(\"过目不忘-汉字库.xlsx\") |>\n  left_join(chrs_freq, by = \"汉字\")\ndata_adj_acc <- data_valid_FWSPro |>\n  unnest(raw_parsed) |>\n  group_by(user_id, game_time) |>\n  mutate(trial = row_number()) |>\n  ungroup() |>\n  mutate(\n    across(\n      c(stim, resp),\n      str_split,\n      pattern = \"-\"\n    )\n  ) |>\n  unnest(c(stim, resp)) |>\n  left_join(\n    select(chrs_used, stim = 汉字, stim_id = ID, stim_freq = 序列号),\n    by = \"stim\"\n  ) |>\n  left_join(\n    select(chrs_used, resp = 汉字, resp_id = ID),\n    by = \"resp\"\n  ) |>\n  separate(stim_id, c(\"stim_phon\", \"stim_form\"), convert = TRUE) |>\n  separate(resp_id, c(\"resp_phon\", \"resp_form\"), convert = TRUE) |>\n  mutate(\n    acc = case_when(\n      stim == resp ~ \"正确\",\n      stim_phon == resp_phon ~ \"同音字\",\n      stim_phon != resp_phon ~ \"错误\"\n    )\n  )\ndata_adj_acc |>\n  group_by(stim, stim_phon, stim_freq, acc) |>\n  summarise(n = n(), .groups = \"drop_last\") |>\n  mutate(prop = n / sum(n)) |>\n  ungroup() |>\n  ggplot(aes(stim, prop, fill = acc)) +\n  geom_bar(stat = \"identity\") +\n  geom_text(\n    aes(label = scales::label_percent(accuracy = 1)(prop)),\n    position = position_stack(vjust = 0.5),\n    color = \"white\"\n  ) +\n  geom_text(\n    aes(label = stim_freq),\n    y = 0\n  ) +\n  scale_fill_brewer(palette = \"Accent\") +\n  facet_wrap(~ stim_phon, scales = \"free_x\", nrow = 1) +\n  labs(x = \"\", y = \"\", fill = \"\") +\n  # scale_y_continuous(expand = c(0, 0)) +\n  ggthemes::theme_hc() +\n  theme(\n    axis.text.x = element_text(family = \"SimHei\"),\n    legend.text = element_text(family = \"SimHei\")\n  )\n```\n\n::: {.cell-output-display}\n![Homophone Selection Proportion](index_files/figure-html/unnamed-chunk-2-1.png){width=1440}\n:::\n:::\n\n\n## Schulte Grid (舒尔特方格)\n\n\n::: {.cell}\n\n```{.r .cell-code}\ntargets::tar_load(data_valid_SchulteMed, store = here::here(\"preproc/_targets\"))\nrt_by_resp <- data_valid_SchulteMed |>\n  mutate(\n    raw_parsed = map(\n      raw_parsed,\n      ~ . |> mutate(resp = as.integer(resp))\n    )\n  ) |>\n  unnest(raw_parsed) |>\n  group_by(user_id, game_time) |>\n  mutate(resp_adj = ifelse(acc == 0, NA, resp)) |>\n  fill(resp_adj, .direction = \"up\") |>\n  ungroup() |>\n  drop_na() |>\n  group_by(user_id, game_version, game_time, resp_adj) |>\n  summarise(rt = sum(rt) / 1000, .groups = \"drop\") |>\n  filter(rt < 300)\nrt_by_resp |>\n  ggplot(aes(resp_adj, rt, color = game_version)) +\n  geom_point(shape = \".\") +\n  geom_smooth() +\n  scale_y_log10() +\n  scale_color_brewer(palette = \"Paired\") +\n  labs(x = \"\", y = \"Response Time (s)\", color = \"Version\") +\n  theme_minimal()\n```\n\n::: {.cell-output-display}\n![](index_files/figure-html/unnamed-chunk-3-1.png){width=672}\n:::\n:::\n\n\n## Reasoning (推理类题目)\n\n\n::: {.cell}\n\n```{.r .cell-code}\ntargets::tar_load(data_valid_DRA, store = here::here(\"preproc/_targets\"))\ndata_valid_DRA |>\n  filter(course_name == \"清华大学认知实验D\") |>\n  unnest(raw_parsed) |>\n  mutate(item = as.numeric(as_factor(itemid))) |>\n  # group_by(item) |>\n  # filter(between(mean(acc == 1), 0.6, 0.9)) |>\n  # ungroup() |>\n  filter(acc != -1) |>\n  pivot_wider(\n    id_cols = user_id,\n    names_from = item,\n    values_from = acc\n  ) |>\n  select(-user_id)\n```\n:::\n\n\n## NeuroRacer (小狗回家)\n\n\n::: {.cell}\n\n```{.r .cell-code}\ndata_racer_new <- targets::tar_read(\n  data_valid_Racer, \n  store = here::here(\"preproc/_targets\")\n) |> \n  tidyr::unnest(raw_parsed) |> \n  dplyr::mutate(block = paste0(\"V\", block)) |> \n  dplyr::filter(block != \"V0\")\ndata_racer_new |> \n  dplyr::group_by(user_id, block) |> \n  dplyr::summarise(\n    mean_score = sum(escortscore * trialdur) / sum(trialdur),\n    .groups = \"drop\"\n  ) |> \n  tidyr::pivot_wider(\n    id_cols = user_id, \n    names_from = block, \n    values_from = mean_score\n  ) |> \n  dplyr::select(-user_id) |> \n  psych::alpha()\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n\nReliability analysis   \nCall: psych::alpha(x = dplyr::select(tidyr::pivot_wider(dplyr::summarise(dplyr::group_by(data_racer_new, \n    user_id, block), mean_score = sum(escortscore * trialdur)/sum(trialdur), \n    .groups = \"drop\"), id_cols = user_id, names_from = block, \n    values_from = mean_score), -user_id))\n\n  raw_alpha std.alpha G6(smc) average_r S/N   ase mean    sd median_r\n      0.85      0.85     0.8      0.66 5.7 0.045 0.84 0.043     0.62\n\n    95% confidence boundaries \n         lower alpha upper\nFeldt     0.73  0.85  0.92\nDuhachek  0.76  0.85  0.94\n\n Reliability if an item is dropped:\n   raw_alpha std.alpha G6(smc) average_r S/N alpha se var.r med.r\nV2      0.75      0.76    0.61      0.61 3.2    0.084    NA  0.61\nV3      0.77      0.77    0.62      0.62 3.3    0.081    NA  0.62\nV1      0.84      0.85    0.73      0.73 5.5    0.054    NA  0.73\n\n Item statistics \n    n raw.r std.r r.cor r.drop mean    sd\nV2 33  0.91  0.89  0.83   0.76 0.84 0.045\nV3 33  0.90  0.89  0.82   0.75 0.85 0.055\nV1 30  0.83  0.85  0.71   0.66 0.83 0.045\n```\n:::\n\n```{.r .cell-code}\ndata_racer_new |> \n  dplyr::group_by(user_id, block) |> \n  dplyr::group_modify(\n    ~ preproc.iquizoo::cpt(.x)\n  )|> \n  dplyr::ungroup() |> \n  tidyr::pivot_wider(\n    id_cols = user_id, \n    names_from = block, \n    values_from = dprime\n  ) |> \n  dplyr::select(-user_id) |> \n  psych::alpha()\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n\nReliability analysis   \nCall: psych::alpha(x = dplyr::select(tidyr::pivot_wider(dplyr::ungroup(dplyr::group_modify(dplyr::group_by(data_racer_new, \n    user_id, block), ~preproc.iquizoo::cpt(.x))), id_cols = user_id, \n    names_from = block, values_from = dprime), -user_id))\n\n  raw_alpha std.alpha G6(smc) average_r S/N  ase mean   sd median_r\n      0.52      0.53    0.45      0.27 1.1 0.15  2.3 0.55     0.23\n\n    95% confidence boundaries \n         lower alpha upper\nFeldt     0.14  0.52  0.75\nDuhachek  0.23  0.52  0.81\n\n Reliability if an item is dropped:\n   raw_alpha std.alpha G6(smc) average_r  S/N alpha se var.r med.r\nV2      0.37      0.38    0.23      0.23 0.60     0.22    NA  0.23\nV3      0.27      0.27    0.15      0.15 0.36     0.25    NA  0.15\nV1      0.59      0.60    0.42      0.42 1.48     0.14    NA  0.42\n\n Item statistics \n    n raw.r std.r r.cor r.drop mean   sd\nV2 33  0.77  0.73  0.53   0.36  2.4 0.82\nV3 33  0.75  0.77  0.60   0.44  2.3 0.69\nV1 30  0.64  0.64  0.31   0.22  2.1 0.78\n```\n:::\n:::\n\n::: {.cell}\n\n```{.r .cell-code}\ndata_racer_old <- targets::tar_read(\n  data_parsed_Racer, \n  store = here::here(\"preproc/_targets\")\n) |> \n  dplyr::filter(game_version == \"1.0.0\") |> \n  tidyr::unnest(raw_parsed) |> \n  dplyr::mutate(block = paste0(\"V\", block))\ndata_racer_old |> \n  dplyr::group_by(user_id, block) |> \n  dplyr::summarise(\n    mean_score = sum(produr * trialdur) / sum(trialdur),\n    .groups = \"drop\"\n  ) |> \n  tidyr::pivot_wider(\n    id_cols = user_id, \n    names_from = block, \n    values_from = mean_score\n  ) |> \n  dplyr::select(-user_id) |> \n  psych::alpha()\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n\nReliability analysis   \nCall: psych::alpha(x = dplyr::select(tidyr::pivot_wider(dplyr::summarise(dplyr::group_by(data_racer_old, \n    user_id, block), mean_score = sum(produr * trialdur)/sum(trialdur), \n    .groups = \"drop\"), id_cols = user_id, names_from = block, \n    values_from = mean_score), -user_id))\n\n  raw_alpha std.alpha G6(smc) average_r  S/N   ase mean sd median_r\n     0.098      0.13    0.11     0.028 0.14 0.073  221 80    0.018\n\n    95% confidence boundaries \n         lower alpha upper\nFeldt    -0.06   0.1  0.24\nDuhachek -0.05   0.1  0.24\n\n Reliability if an item is dropped:\n   raw_alpha std.alpha G6(smc) average_r   S/N alpha se   var.r    med.r\nV1     0.162     0.161   0.130     0.046 0.192    0.072 0.00177  0.03686\nV2     0.075     0.099   0.079     0.027 0.110    0.077 0.00132  0.01817\nV3     0.079     0.106   0.085     0.029 0.118    0.076 0.00137  0.01817\nV4     0.028     0.039   0.031     0.010 0.041    0.079 0.00055  0.00446\nV5     0.073     0.104   0.087     0.028 0.116    0.076 0.00278 -0.00002\n\n Item statistics \n     n raw.r std.r  r.cor r.drop mean  sd\nV1 363  0.62  0.43 0.0067 0.0036  310 246\nV2 363  0.38  0.47 0.1675 0.0486  197 132\nV3 363  0.39  0.47 0.1501 0.0430  192 141\nV4 363  0.47  0.52 0.3053 0.0882  200 158\nV5 363  0.43  0.47 0.1460 0.0482  205 155\n```\n:::\n\n```{.r .cell-code}\ndata_racer_old |> \n  dplyr::group_by(user_id, block) |> \n  dplyr::group_modify(\n    ~ preproc.iquizoo::cpt(.x)\n  )|> \n  dplyr::ungroup() |> \n  tidyr::pivot_wider(\n    id_cols = user_id, \n    names_from = block, \n    values_from = dprime\n  ) |> \n  dplyr::select(-user_id) |> \n  psych::alpha()\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n\nReliability analysis   \nCall: psych::alpha(x = dplyr::select(tidyr::pivot_wider(dplyr::ungroup(dplyr::group_modify(dplyr::group_by(data_racer_old, \n    user_id, block), ~preproc.iquizoo::cpt(.x))), id_cols = user_id, \n    names_from = block, values_from = dprime), -user_id))\n\n  raw_alpha std.alpha G6(smc) average_r S/N  ase mean  sd median_r\n      0.76      0.76    0.72      0.39 3.2 0.02  2.2 0.6     0.41\n\n    95% confidence boundaries \n         lower alpha upper\nFeldt     0.72  0.76   0.8\nDuhachek  0.72  0.76   0.8\n\n Reliability if an item is dropped:\n   raw_alpha std.alpha G6(smc) average_r S/N alpha se  var.r med.r\nV1      0.73      0.73    0.67      0.40 2.7    0.023 0.0010  0.42\nV2      0.70      0.70    0.64      0.37 2.3    0.026 0.0037  0.38\nV3      0.71      0.71    0.66      0.38 2.4    0.025 0.0053  0.39\nV4      0.72      0.72    0.67      0.39 2.6    0.024 0.0036  0.41\nV5      0.72      0.72    0.67      0.39 2.6    0.024 0.0035  0.41\n\n Item statistics \n     n raw.r std.r r.cor r.drop mean   sd\nV1 363  0.70  0.69  0.57   0.49  1.6 0.88\nV2 363  0.76  0.75  0.66   0.58  2.2 0.91\nV3 363  0.73  0.73  0.63   0.55  2.4 0.83\nV4 363  0.69  0.70  0.59   0.51  2.4 0.80\nV5 363  0.68  0.70  0.59   0.51  2.5 0.76\n```\n:::\n:::\n",
    "supporting": [],
    "filters": [
      "rmarkdown/pagebreak.lua"
    ],
    "includes": {},
    "engineDependencies": {},
    "preserve": {},
    "postProcess": null
  }
}