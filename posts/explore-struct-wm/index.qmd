---
title: "Explore Cognitive Structure for Working Memory"
author: "Liang Zhang"
date: "2022-05-09"
draft: false
format:
  html:
    code-fold: true
    toc: true
    toc-location: left
categories: [structure, wm]
---

```{r}
#| label: setup
#| include: false
library(tidyverse)
library(corrr)
library(BayesFM)
requireNamespace("bit64")
```

```{r}
pivot_wider_indices <- function(data) {
  data |>
    add_count(user_id, game_name) |>
    mutate(
      game_index = if_else(
        n == 1,
        game_name,
        str_c(game_name, index_name, sep = "-")
      )
    ) |>
    pivot_wider(
      id_cols = user_id,
      names_from = game_index,
      values_from = test
    )
}
```

```{r}
#| label: load-data
targets::tar_load(users, store = here::here("preproc/_targets"))
ind_filt <- readxl::read_excel(here::here("config/indices_filtering.xlsx"))
dim_order <- c("attention", "multitask", "switching", "inhibition",
               "reasoning", "complex span", "working memory", "short term memory",
               "long term memory", "probability learning",
               "speeded IP", "strategic IP",
               "perception", "math", "language")
indices_clean <- targets::tar_read(indices_clean, store = here::here("preproc/_targets")) |>
  full_join(ind_filt, by = c("game_name", "index_name")) |>
  anti_join(
    filter(users, grade == "20220303级"),
    by = "user_id"
  ) |> 
  filter(
    !is.na(check_result) & check_result != "target-stash",
    !game_name %in% c("文字推理", "数字推理")
  ) |>
  arrange(factor(dimension, dim_order)) |>
  mutate(test = if_else(reversed, -test, test)) |>
  group_by(game_name, index_name) |>
  mutate(test = if_else(test %in% boxplot.stats(test)$out, NA_real_, test)) |>
  ungroup()
indices_memory <- indices_clean |>
  filter(
    dimension %in% c("complex span", "working memory", "short term memory"),
    !game_name %in% c("魔术师终极", "人工语言-中级", "欢乐餐厅", "过目不忘PRO", "连续再认")
  )
```

The include tasks:

`r str_c(str_c("* ", unique(indices_memory$game_name)), collapse = "\n")`

```{r eval=FALSE}
#| fig-width: 16
#| fig-height: 16
indices_memory |>
  pivot_wider_indices() |>
  select(-user_id) |>
  correlate(quiet = TRUE) |>
  rearrange(method = "HC") |>
  stretch() |>
  mutate(across(c(x, y), as_factor)) |>
  ggplot(aes(x, y)) +
  geom_tile(aes(fill = r)) +
  scico::scale_fill_scico(palette = "bam", midpoint = 0, direction = -1) +
  coord_fixed() +
  theme_minimal(base_size = 18) +
  labs(x = "", y = "", fill = "Pearson's", color = "") +
  theme(axis.text.x = element_text(angle = 45, hjust = 1))
```

# Default Index selection

> All span tasks use `mean_span_pcu` index, and all n-back tasks use `dprime` index.

```{r}
indices_memory <- indices_clean |>
  filter(
    dimension %in% c("complex span", "working memory", "short term memory"),
    !game_name %in% c("魔术师终极", "人工语言-中级", "欢乐餐厅", "过目不忘PRO", "连续再认")
  )
indices_selected <- indices_memory |>
  filter(index_name %in% c("mean_span_pcu", "dprime")) |>
  pivot_wider_indices() |>
  select(-user_id)
```

{{< include _child.qmd >}}

# Mix N back indices

> All span tasks use `mean_span_pcu` index, but n-back tasks use mixed `dprime` and `pc` index.
>
> -   美术卡片、数字卡片：`dprime`
> -   文字卡片、格子卡片：`pc`

```{r}
indices_selected <- indices_memory |>
  filter(index_name == "mean_span_pcu" |
           (game_name %in% c("美术卡片", "格子卡片") & index_name == "dprime") |
           (game_name %in% c("文字卡片", "数字卡片") & index_name == "pc")) |>
  pivot_wider_indices() |>
  select(-user_id)
```

{{< include _child.qmd >}}

# N back all `pc` index

> All span tasks use `mean_span_pcu` index, but n-back tasks all use `pc` index.

```{r}
indices_selected <- indices_memory |>
  filter(index_name %in% c("mean_span_pcu", "pc")) |>
  pivot_wider_indices() |>
  select(-user_id)
```

{{< include _child.qmd >}}

# Add reasoning tasks

```{r}
indices_selected <- indices_clean |>
  filter(
    check_result == "target",
    dimension %in% c("reasoning", "complex span", "working memory", "short term memory"),
    !game_name %in% c("远距离联想", "人工语言-中级", "各得其所", "魔术师终极")
  ) |>
  pivot_wider_indices() |>
  select(-user_id)
```

The included tasks:

`r str_c(str_c("* ", names(indices_selected)), collapse = "\n")`

## Correlation Matrix

```{r}
#| fig-width: 10
#| fig-height: 8
correlate(indices_selected, quiet = TRUE) |>
  rearrange(method = "HC") |>
  stretch() |>
  mutate(across(c(x, y), as_factor)) |>
  ggplot(aes(x, y)) +
  geom_tile(aes(fill = r)) +
  scico::scale_fill_scico(palette = "bam", midpoint = 0, direction = -1) +
  coord_fixed() +
  theme_minimal(base_size = 18) +
  labs(x = "", y = "", fill = "Pearson's", color = "") +
  theme(axis.text.x = element_text(angle = 45, hjust = 1))
```

```{r}
mds <- indices_selected |>
  cor(use = "pairwise") |>
  smacof::sim2diss(to.dist = TRUE) |>
  smacof::mds(ndim = 2, type = "mspline")
# plot(mds, plot.type = "Shepard", main = "Shepard Diagram (Ratio Transformation)")
# par(family = "SimHei")
plot(mds)
```

## Exploratory Factor Analysis

### Traditional

```{r}
nfactors_test <- psych::nfactors(indices_selected)
```

```{r}
#| fig-width: 8
#| fig-height: 10
fit <- psych::fa(indices_selected, 4)
psych::fa.diagram(fit)
```

```{r}
#| fig-width: 8
#| fig-height: 10
fit_bifac <- psych::omega(indices_selected, 4, plot = FALSE)
psych::omega.diagram(fit_bifac)
```

### Bayesian Factor Analysis

```{r}
mcmc <- indices_selected |>
  mutate(across(.fns = ~ scale(.)[, 1])) |>
  befa(verbose = FALSE) |>
  post.column.switch() |>
  post.sign.switch()
```

```{r}
#| fig-width: 10
#| fig-height: 6
hppm <- summary(mcmc, what = "hppm")
hppm |>
  pluck("alpha", "m1") |>
  as_tibble(rownames = "alpha_term") |>
  separate(alpha_term, c(NA, "game_index"), sep = ":") |>
  mutate(game_index = reorder(game_index, dedic)) |>
  ggplot(aes(game_index, dedic)) +
  geom_tile(aes(fill = mean)) +
  geom_text(aes(label = round(mean, 2)), color = "white") +
  scico::scale_fill_scico(palette = "bam", midpoint = 0, direction = -1) +
  coord_fixed() +
  theme_minimal(base_size = 18) +
  labs(x = "Term", y = "Factor",
       title = str_c("Posterior Probability: ", round(hppm$hppm$prob, 2),
                     ", with ", hppm$hppm$nfac, " factors")) +
  theme(axis.text.x = element_text(angle = 45, hjust = 1))
```

## Confirmatory Factor Analysis

```{r}
#| fig-height: 4
#| fig-width: 10
fit_result <- lavaan::cfa(
  'Updating =~ `美术卡片` + `数字卡片` + `格子卡片` + `文字卡片`
  # AscMem =~ `人工语言-中级` + `欢乐餐厅` + 图片记忆
  VerbalSTM =~ `幸运小球` + `密码箱` + `顺背数PRO`
  SpatialSTM =~ `宇宙黑洞` + `打靶场` + `蝴蝶照相机` + `位置记忆PRO`
  Reasoning =~ 三维心理旋转测试 + 图形推理 + 图形折叠',
  indices_selected, std.lv = TRUE, std.ov = TRUE,
  estimator = "MLR", missing = "ml"
)
semPlot::semPaths(
  fit_result, what = "std", edge.color = "black", layout = "tree2",
  sizeMan = 6, sizeLat = 8, edge.label.cex = 0.6, intercepts = FALSE,
  nCharEdges = 5, esize = 1, trans = 1, nCharNodes = 0
)
lavaan::summary(fit_result, fit.measures = TRUE, estimates = FALSE)
```

```{r}
#| fig-height: 4
#| fig-width: 10
fit_result_alt <- lavaan::cfa(
  'Updating =~ Updating1 + Updating2
  Updating1 =~ `美术卡片` + `数字卡片`
  Updating2 =~ `格子卡片` + `文字卡片`
  # AscMem =~ `人工语言-中级` + `欢乐餐厅` + 图片记忆
  VerbalSTM =~ `幸运小球` + `密码箱` + `顺背数PRO`
  SpatialSTM =~ `宇宙黑洞` + `打靶场` + `蝴蝶照相机` + `位置记忆PRO`
  Reasoning =~ 三维心理旋转测试 + 图形推理 + 图形折叠',
  indices_selected, std.lv = TRUE, std.ov = TRUE,
  estimator = "MLR", missing = "ml"
)
semPlot::semPaths(
  fit_result_alt, what = "std", edge.color = "black",
  sizeMan = 6, sizeLat = 8, edge.label.cex = 0.6, intercepts = FALSE,
  nCharEdges = 5, esize = 1, trans = 1, nCharNodes = 0
)
lavaan::summary(fit_result_alt, fit.measures = TRUE, estimates = FALSE)
```

```{r}
#| fig-height: 6
#| fig-width: 10
fit_result_high_order <- lavaan::cfa(
  'WM =~ Updating + VerbalSTM + SpatialSTM
  Updating =~ Updating1 + Updating2
  Updating1 =~ `美术卡片` + `数字卡片`
  Updating2 =~ `格子卡片` + `文字卡片`
  # AscMem =~ `人工语言-中级` + `欢乐餐厅` + 图片记忆
  VerbalSTM =~ `幸运小球` + `密码箱` + `顺背数PRO`
  SpatialSTM =~ `打靶场` + `蝴蝶照相机` + `位置记忆PRO`
  Reasoning =~ 三维心理旋转测试 + 图形推理 + 图形折叠',
  indices_selected, std.lv = TRUE, std.ov = TRUE,
  estimator = "MLR", missing = "ml"
)
semPlot::semPaths(
  fit_result_high_order, what = "std", edge.color = "black",
  sizeMan = 6, sizeLat = 8, edge.label.cex = 0.6, intercepts = FALSE,
  nCharEdges = 5, esize = 1, trans = 1, nCharNodes = 0
)
lavaan::summary(fit_result_high_order, fit.measures = TRUE, estimates = FALSE)
```
