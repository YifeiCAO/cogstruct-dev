---
title: "Explore Cognitive Structure for Working Memory"
author: "Liang Zhang"
date: "2022-05-09"
draft: false
format: 
  html:
    code-fold: true
    toc: true
    toc-location: left
categories: [structure, wm]
---

```{r}
#| label: setup
library(tidyverse)
library(corrr)
library(BayesFM)
```

```{r}
pivot_wider_indices <- function(data) {
  data |> 
    add_count(user_id, game_name) |>
    mutate(
      game_index = if_else(
        n == 1,
        game_name,
        str_c(game_name, index_name, sep = "-")
      )
    ) |>
    pivot_wider(
      id_cols = user_id,
      names_from = game_index,
      values_from = test
    )
}
render_content <- function(file, ...) {
  knitr::knit(
    text = knitr::knit_expand(file, ...),
    quiet = TRUE
  )
}
```

```{r}
#| label: load-data
#| cache: true
targets::tar_load(users, store = here::here("preproc/_targets"))
ind_filt <- readxl::read_excel(here::here("config/indices_filtering.xlsx"))
dim_order <- c("attention", "multitask", "switching", "inhibition", 
               "reasoning", "complex span", "working memory", "short term memory", 
               "long term memory", "probability learning",
               "speeded IP", "strategic IP", 
               "perception", "math", "language")
indices_clean <- targets::tar_read(indices_final, store = here::here("preproc/_targets")) |> 
  full_join(ind_filt, by = c("game_name", "index_name")) |> 
  filter(
    !is.na(check_result) & check_result != "target-stash",
    grade != "20220303级",
    !game_name %in% c("文字推理", "数字推理")
  ) |>
  arrange(factor(dimension, dim_order)) |>
  mutate(test = if_else(reversed, -test, test)) |>
  group_by(game_name, index_name) |>
  mutate(test = if_else(test %in% boxplot.stats(test)$out, NA_real_, test)) |> 
  ungroup()
indices_memory <- indices_clean |> 
  filter(
    dimension %in% c("complex span", "working memory", "short term memory", "long term memory"),
    !game_name %in% c("言语记忆", "连续再认", "魔术师终极", "人工语言-中级", "图片记忆", "欢乐餐厅", "过目不忘PRO")
  )
# add_count(user_id, game_name) |> 
# mutate(
#   game_index = if_else(
#     n == 1, 
#     game_name, 
#     str_c(game_name, index_name, sep = "-")
#   )
# ) |> 
# pivot_wider(
#   id_cols = user_id,
#   names_from = game_index,
#   values_from = test
# ) |> 
# select(-user_id)
```

The include tasks: 

`r str_c(str_c("* ", unique(indices_memory$game_name)), collapse = "\n")`

# Default Index selection

> All span tasks use `mean_span_pcu` index, and all n-back tasks use `dprime` index.

```{r}
indices_selected <- indices_memory |> 
  filter(index_name %in% c("mean_span_pcu", "dprime")) |> 
  pivot_wider_indices() |>
  select(-user_id)
```

```{r}
#| child: !expr here::here("archetypes/child-fa-wm.Rmd~")
```

# Mix N back indices

> All span tasks use `mean_span_pcu` index, but n-back tasks use mixed `dprime` and `pc` index.
>
> * 美术卡片、数字卡片：`dprime`
> * 文字卡片、格子卡片：`pc`

```{r}
indices_selected <- indices_memory |> 
  filter(index_name == "mean_span_pcu" |
           (game_name %in% c("美术卡片", "格子卡片") & index_name == "dprime") |
           (game_name %in% c("文字卡片", "数字卡片") & index_name == "pc")) |> 
  pivot_wider_indices() |>
  select(-user_id)
```

```{r}
#| child: !expr here::here("archetypes/child-fa-wm.Rmd~")
```

# N back all `pc` index

> All span tasks use `mean_span_pcu` index, but n-back tasks all use `pc` index.

```{r}
indices_selected <- indices_memory |> 
  filter(index_name %in% c("mean_span_pcu", "pc")) |> 
  pivot_wider_indices() |>
  select(-user_id)
```

```{r}
#| child: !expr here::here("archetypes/child-fa-wm.Rmd~")
```
